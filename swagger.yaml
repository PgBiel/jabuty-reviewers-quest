openapi: 3.0.3
info:
  title: Jabuty Reviewer's Quest Backend API
  description: |-
    This is the API exposed by Jabuty's backend. The frontend must make requests to this API in order to access the database. The frontend works as a SPA (Single-Page Application) and therefore is responsible for page routing, so the backend is truly only responsible for the API (and not for redirecting users or, really, having any direct interactions with the frontend other than responding to API requests).

    Last updated at: 2023-11-23
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  version: 0.1.0
servers:
  - url: https://localhost:8000/api
tags:
  - name: games
    description: Access and modify games
  - name: user
    description: Operations about users
paths:
  /games:
    get:
      tags:
        - games
      summary: Gets a (filtered or not) list of games
      description: Gets a list of games with the specified filter and/or amount
      operationId: getGames
      parameters:
        - name: filter
          in: query
          description: Filter games by name (starting with the given string)
          schema:
            type: string
            default: ""
            example: Outer Wi
        - name: amount
          in: query
          description: Max amount of games to return
          schema:
            type: integer
            default: 50
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
  /game/{gameId}:
    get:
      tags:
        - games
      summary: Get information for a game
      description: Gets info for the game with that ID
      operationId: getGameById
      parameters:
        - name: gameId
          in: path
          description: ID of game to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Game with that ID found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: There is no game with that ID
  /game/{gameId}/reviews:
    get:
      tags:
        - games
      summary: Get an unfiltered list of reviews for that game
      description: Gets a list of reviews with the specified amount
      operationId: getReviewsForGameById
      parameters:
        - name: gameId
          in: path
          description: ID of game to check reviews for
          required: true
          schema:
            type: integer
            format: int64
        - name: amount
          in: query
          description: Max amount of games to return
          schema:
            type: integer
            default: 50
            format: int64
      responses:
        '200':
          description: Game with that ID found; reviews returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: There is no game with that ID
    post:
      tags:
        - games
      summary: Create a review for that game
      description: Creates a review for the given game. **Requires login.**
      operationId: createReviewForGameById
      parameters:
        - name: gameId
          in: path
          description: ID of game to create a review for
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/NewReview'
      security:
        - login_cookie_auth: []
      responses:
        '200':
          description: Review created
        '400':
          description: Invalid review data
        '404':
          description: There is no game with that ID
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      security:
        - login_cookie_auth: []
      responses:
        '200':
          description: successful operation
        '403':
          description: user not logged in
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user info by user ID
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to fetch
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: no user with that ID found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to fetch
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - login_cookie_auth: []
      responses:
        '200':
          description: successful operation
        '403':
          description: unauthorized operation
        '404':
          description: no user with that ID found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to fetch
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      security:
        - login_cookie_auth: []
      responses:
        '403':
          description: unauthorized operation
        '404':
          description: no user with that ID found
components:
  schemas:
    Game:
      type: object
      required:
        - game_id
        - name
        - release_year
      properties:
        game_id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Outer Wilds
        release_year:
          type: integer
          format: int64
          example: 2019
        publisher:
          type: string
          example: Annapurna Interactive
        developer:
          type: string
          example: Mobius Games
        genre:
          type: string
          example: Space Exploration
    Review:
      type: object
      properties:
        review_id:
          type: integer
          format: int64
          example: 10
        game_id:
          type: integer
          format: int64
          example: 10
        author_id:
          type: integer
          format: int64
          example: 10
        stars:
          type: integer
          format: int64
          example: 4
        body:
          type: string
          description: The text in the review
          example: Very good game.
    NewReview:
      type: object
      description: Object with info needed to create a new review through its endpoint.
      properties:
        stars:
          type: integer
          format: int64
          example: 4
        body:
          type: string
          description: The text in the review.
          example: Very good game.
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
  requestBodies:
    NewReview:
      description: |
        Fields for a new review. IDs are inferred based on the request data,
        such as logged in user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewReview'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/NewReview'
  securitySchemes:
    login_cookie_auth:
      type: apiKey
      name: login_cookie_auth
      description: Requires the user to be logged in
      in: cookie
