# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Website CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  frontend:
    name: "Frontend Test"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x] # [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v3
    - name: 📥 Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    - name: 👀 Check setup
      run: |
        echo "working directory: $(pwd)"
        npm --version
        node --version
    - name: 📥 Install dependencies
      run: npm ci
    - name: ✅ Lint and check formatting
      run: npm run lint
    - name: 🛠️ Build frontend
      run: |
        npm run build
        ls ../templates/vue/index.html # fail if template didn't compile
        ls ../static/vue # fail if assets weren't generated
    - name: ✅ Run tests
      run: echo No tests available. # npm test

  backend:
    name: "Backend Test"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        poetry-version: [1.7.0]
        python-version: [3.11]

    env:
      BACKEND_SRC_FOLDER: reviewers_quest

    steps:
    - uses: actions/checkout@v3
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python-version }}"
    - name: 🍇 Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-0  # increment to reset cache
    - name: 📥 Install and configure Poetry
      uses: snok/install-poetry@v1
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      with:
        version: ${{ strategy.matrix.poetry-version }}
    - name: 📥 Install Python project dependencies
      run: poetry install --with dev --sync
    - name: 👀 Check setup
      run: |
        python3 --version
        poetry --version
        poetry run ruff --version
    - name: ✅ Run ruff formatter
      run: poetry run ruff format --check ${BACKEND_SRC_FOLDER}
    - name: ✅ Run ruff linter
      run: poetry run ruff check ${BACKEND_SRC_FOLDER}
    - name: ✅ Run tests
      run: echo No tests available.
